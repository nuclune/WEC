//---------------------------------------------------------------------
// <autogenerated>
//
//     Generated by Message Compiler (mc.exe)
//
//     Copyright (c) Microsoft Corporation. All Rights Reserved.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </autogenerated>
//---------------------------------------------------------------------




namespace smstt.DummyEvent
{
using System;
using System.Collections.Generic;
using System.Text;
using System.Diagnostics;
using System.Diagnostics.Eventing;
using Microsoft.Win32;
using System.Runtime.InteropServices;
using System.Security.Principal;

    public static class CCTTSMS_EVENTS
    {
        //
        // Provider CCTTSMS Event Count 1
        //

        internal static EventProviderVersionTwo m_provider = new EventProviderVersionTwo(new Guid("2cd11903-526e-441d-9639-81ecd9f7fe9b"));
        //
        // Task :  eventGUIDs
        //

        //
        // Event Descriptors
        //
        private static EventDescriptor DUMMY_EVENT;


        static CCTTSMS_EVENTS()
        {
            unchecked
            {
                DUMMY_EVENT = new EventDescriptor(0x64, 0x0, 0x0, 0x0, 0x0, 0x0, (long)0x0);
            }
        }


        //
        // Event method for DUMMY_EVENT
        //
        public static bool EventWriteDUMMY_EVENT(string Prop_UnicodeString, uint PropUInt32)
        {

            if (!m_provider.IsEnabled())
            {
                return true;
            }

            return m_provider.TemplateDUMMY_TEMPLATE(ref DUMMY_EVENT, Prop_UnicodeString, PropUInt32);
        }
    }

    public static class CCTTSQLX3_EVENTS
    {
        //
        // Provider CCTTSQLX3 Event Count 1
        //

        internal static EventProviderVersionTwo m_provider = new EventProviderVersionTwo(new Guid("50c62a8e-3255-4ae5-bfb1-a487846a1442"));
        //
        // Task :  eventGUIDs
        //

        //
        // Event Descriptors
        //
        private static EventDescriptor DUMMY_EVENT;


        static CCTTSQLX3_EVENTS()
        {
            unchecked
            {
                DUMMY_EVENT = new EventDescriptor(0x64, 0x0, 0x0, 0x0, 0x0, 0x0, (long)0x0);
            }
        }


        //
        // Event method for DUMMY_EVENT
        //
        public static bool EventWriteDUMMY_EVENT(string Prop_UnicodeString, uint PropUInt32)
        {

            if (!m_provider.IsEnabled())
            {
                return true;
            }

            return m_provider.TemplateDUMMY_TEMPLATE(ref DUMMY_EVENT, Prop_UnicodeString, PropUInt32);
        }
    }

    internal class EventProviderVersionTwo : EventProvider
    {
         internal EventProviderVersionTwo(Guid id)
                : base(id)
         {}


        [StructLayout(LayoutKind.Explicit, Size = 16)]
        private struct EventData
        {
            [FieldOffset(0)]
            internal UInt64 DataPointer;
            [FieldOffset(8)]
            internal uint Size;
            [FieldOffset(12)]
            internal int Reserved;
        }



        internal unsafe bool TemplateDUMMY_TEMPLATE(
            ref EventDescriptor eventDescriptor,
            string Prop_UnicodeString,
            uint PropUInt32
            )
        {
            int argumentCount = 2;
            bool status = true;

            if (IsEnabled(eventDescriptor.Level, eventDescriptor.Keywords))
            {
                byte* userData = stackalloc byte[sizeof(EventData) * argumentCount];
                EventData* userDataPtr = (EventData*)userData;

                userDataPtr[0].Size = (uint)(Prop_UnicodeString.Length + 1)*sizeof(char);

                userDataPtr[1].DataPointer = (UInt64)(&PropUInt32);
                userDataPtr[1].Size = (uint)(sizeof(int)  );

                fixed (char* a0 = Prop_UnicodeString)
                {
                    userDataPtr[0].DataPointer = (ulong)a0;
                    status = WriteEvent(ref eventDescriptor, argumentCount, (IntPtr)(userData));
                }
            }

            return status;

        }

    }

}
